plugins {
    id("com.android.application") version "8.1.0" apply false
    id("com.android.library") version "8.1.0" apply false
    id("org.jetbrains.kotlin.android") version "1.9.10" apply false
    id 'com.google.devtools.ksp' version '1.9.10-1.0.13' apply false
}

tasks.register('clean', Delete) {
    delete rootProject.buildFile
}

def needReplaceLocal = true
if (needReplaceLocal) {
    allprojects {
        configurations.configureEach {
            resolutionStrategy {
                dependencySubstitution {
                    substitute module('com.github.penfeizhou.android.animation:frameanimation') using project(":frameanimation")
                    substitute module('com.github.penfeizhou.android.animation:apng') using project(":apng")
                    substitute module('com.github.penfeizhou.android.animation:awebp') using project(":awebp")
                    substitute module('com.github.penfeizhou.android.animation:gif') using project(":gif")
                    substitute module('com.github.penfeizhou.android.animation:glide-plugin') using project(":plugin_glide")
                    substitute module('com.github.penfeizhou.android.animation:awebpencoder') using project(":awebpencoder")
                }
            }
        }
    }
}

Properties properties = new Properties()
properties.load(project.rootProject.file('version.properties').newDataInputStream())

ext {
    Version = properties.version
}


task publishFrameAnimation dependsOn(":frameanimation:publish") {
    println "FrameAnimation published"
}

task publishAPNG dependsOn(publishFrameAnimation, ":apng:publish") {
    println "APNG published"
}

task publishAWebP dependsOn(publishFrameAnimation, ":awebp:publish") {
    println "AWebP published"
}

task publishGif dependsOn(publishFrameAnimation, ":gif:publish") {
    println "Gif published"
}

task publishAWebPEncoder dependsOn(publishAWebP, publishGif, ":awebpencoder:publish") {
    println "AwebP Encoder published"
}

task publishGlidePlugin dependsOn(publishAPNG, publishAWebP, publishGif, ":plugin_glide:publish") {
    println "GlidePlugin published"
}

task PublishAll dependsOn(publishGlidePlugin, publishAWebPEncoder) {
    println "All published"
}